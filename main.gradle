buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'com.diluv.schoomp', name: 'Schoomp', version: '1.1.0+'
    }
}

apply from: "https://raw.githubusercontent.com/Flemmli97/GradleScripts/mc-architectury-fabric-neoforge/changelog.gradle"

import com.diluv.schoomp.Webhook
import com.diluv.schoomp.message.Message
import com.diluv.schoomp.message.embed.Embed

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    repositories {
        maven { url = 'https://maven.parchmentmc.org' }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.parchment_version}@zip")
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = project.minecraft_version + "-" + rootProject.mod_version
    group = rootProject.maven_group

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = project.hasProperty('jvm') ? rootProject.jvm : 21
    }

    java {
        withSourcesJar()
    }
}

task buildAll {
    dependsOn(":fabric:build")
    dependsOn(":neoforge:build")
}

task cleanAll {
    dependsOn clean
    dependsOn(":common:clean")
    dependsOn(":fabric:clean")
    dependsOn(":neoforge:clean")
}

task publishAll {
    dependsOn(":common:publish")
    dependsOn(":fabric:publish")
    dependsOn(":neoforge:publish")
}

//Splits the changelog into multiple parts if they get bigger than discords embed field size (1024)
def discordChangelog() {
    def changelog = ext.changelog(1)
    def res = new ArrayList()
    if (changelog.size() < 1024) {
        res.add(changelog)
        return res;
    }
    def temp = ""
    changelog.split("\n").each {
        it = it + "\n"
        if ((temp.size() + it.size()) >= 1024) {
            res.add(temp)
            temp = it
        } else
            temp += it
    }
    res.add(temp)
    return res
}

def discordNotif(fabric, forge) {
    try {
        def webhook = new Webhook(findProperty('discordHook'), "${project.project_name} Upload")

        def message = new Message()
        def version = project.curse_versions.split(', ')[0]
        message.setUsername("Curseforge Release")
        def content = "${project.project_name} ${project.mod_version} for Minecraft ${version} has been released!"
        if (project.hasProperty("discord_role"))
            content = "<@&${project.discord_role}> " + content
        message.setContent(content)
        message.setAvatarUrl("https://cdn.discordapp.com/avatars/680540027255652407/e4b7a058b24843ae13389a9a3cc3ae8c.png?size=128")

        def embed = new Embed()

        if(fabric) {
            def fileIDFabric = project("fabric").tasks.getByName("curseforge${project.curse_id_fabric}").property('mainArtifact').fileID
            embed.addField('Get the fabric version here (When it is accepted)', "${project.findProperty('curse_page_fabric')}/files/${fileIDFabric}", false)
            fileIDFabric = project("fabric").tasks.getByName("modrinth").property('uploadInfo').id
            embed.addField('Modrinth version (fabric)', "${project.findProperty('modrinth_page')}/version/${fileIDFabric}", false)
        }
        if(forge) {
            def fileIDForge = project("neoforge").tasks.getByName("curseforge${project.curse_id_forge}").property('mainArtifact').fileID
            embed.addField('Get the neoforge version here (When it is accepted)', "${project.findProperty('curse_page_forge')}/files/${fileIDForge}", false)
            fileIDForge = project("neoforge").tasks.getByName("modrinth").property('uploadInfo').id
            embed.addField('Modrinth version (neoforge)', "${project.findProperty('modrinth_page')}/version/${fileIDForge}", false)
        }
        def changelog = discordChangelog()
        if (changelog.size() == 1)
            embed.addField('Change Log', "```md\n${changelog.get(0) ?: 'Unavailable :('}```", false)
        else
            changelog.forEach {
                embed.addField("Change Log", "```md\n${it}```", false)
            }
        embed.setColor(0xFF8000)
        message.addEmbed(embed)

        webhook.sendMessage(message)
    }

    catch (IOException e) {
        println 'Failed to push to the Discord webhook.'
    }
}

task upload(group: "publishing") {
    dependsOn "fabric:curseforge", "neoforge:curseforge", "fabric:modrinth", "neoforge:modrinth"
}

tasks.upload.doLast {
    discordNotif(true, true)
}

task buildUploadAll(group: "publishing") {
    dependsOn cleanAll, buildAll, publishAll, upload
    buildAll.mustRunAfter cleanAll
    upload.mustRunAfter publishAll
}

task buildToLocal(group: "publishing") {
    dependsOn cleanAll, buildAll, ":common:publishToMavenLocal", ":fabric:publishToMavenLocal", ":neoforge:publishToMavenLocal"
    buildAll.mustRunAfter cleanAll
}

afterEvaluate {
    task buildUploadFabric(group: "publishing") {
        dependsOn cleanAll, ":fabric:build", ":fabric:publish", "fabric:curseforge", "fabric:modrinth"
        project("fabric").build.mustRunAfter cleanAll
        project("fabric").publish.mustRunAfter ":fabric:build"
        doLast {
            discordNotif(true, false)
        }
    }

    task buildUploadForge(group: "publishing") {
        dependsOn cleanAll, ":neoforge:build", ":neoforge:publish", "neoforge:curseforge", "neoforge:modrinth"
        project("neoforge").build.mustRunAfter cleanAll
        project("neoforge").publish.mustRunAfter ":neoforge:build"
        doLast {
            discordNotif(false, true)
        }
    }
}

publishAll.dependsOn buildAll